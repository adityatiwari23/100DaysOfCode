//Find First and Last Position of Element in Sorted Array
// Medium

//Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

// If target is not found in the array, return [-1, -1].

// You must write an algorithm with O(log n) runtime complexity.

 

// Example 1:

// Input: nums = [5,7,7,8,8,10], target = 8
// Output: [3,4]
// Example 2:

// Input: nums = [5,7,7,8,8,10], target = 6
// Output: [-1,-1]
// Example 3:

// Input: nums = [], target = 0
// Output: [-1,-1]
//Solution------




class Solution {
public:
    void  firstOcc(vector<int>& nums,int n,int target, vector<int>&v)
    {
        int s=0,e=n-1;
        int mid=s+(e-s)/2; // just to prevent overflow of integer
        while(s<=e){
            
            if(nums[mid]==target)
            {
                v[0]=mid;
                e=mid-1;
                
            }
            else if(nums[mid]>target){
                e=mid-1;
            }else if(nums[mid]<target){
                s=mid+1;
            }
            mid=s+(e-s)/2;
        }
    }  
    void lastOcc(vector<int>& nums,int n,int target,vector<int>&v)
    {
        
        int s=0,e=n-1;
        int mid=s+(e-s)/2;
        while(s<=e){
            
            if(nums[mid]==target)
            {
                v[1]=mid;
               s=mid+1;
                
            }
            else if(nums[mid]>target){
                e=mid-1;
            }else if(nums[mid]<target){
                s=mid+1;
            }
            mid=s+(e-s)/2;
        }
        
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>v(2,-1);
        int n=nums.size();
        
        firstOcc(nums,n,target,v);
        lastOcc(nums,n,target,v);
        
        return v;
        
        
    }
};
